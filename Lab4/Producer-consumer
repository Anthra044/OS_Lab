// Producer-consumer problem using semaphores

#include <stdio.h>
#include <stdlib.h>

#define MAX 5

int buffer[MAX], count = 0;
int mutex = 1, full = 0, empty = MAX, x = 0;

void wait(int *s) {
    while (*s <= 0);
    --(*s);
}

void signal(int *s) {
    ++(*s);
}

void producer() {
    if (empty == 0) {
        printf("Buffer is full!\n");
        return;
    }
    wait(&empty);
    wait(&mutex);
    buffer[count++] = ++x;
    printf("Producer produced item %d\n", x);
    signal(&mutex);
    signal(&full);
}

void consumer() {
    if (full == 0) {
        printf("Buffer is empty!\n");
        return;
    }
    wait(&full);
    wait(&mutex);
    printf("Consumer consumed item %d\n", buffer[--count]);
    signal(&mutex);
    signal(&empty);
}

int main() {
    int choice;
    while (1) {
        printf(" 1.Produce 2.Consume 3.Exit\n");
        printf(" Enter your choice: \n");
        scanf("%d", &choice);
        switch (choice) {
            case 1: producer(); break;
            case 2: consumer(); break;
            case 3: exit(0);
            default: printf("Invalid choice!\n");
        }
    }
    return 0;
}
