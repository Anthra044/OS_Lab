//Bankers algorithm

#include <stdio.h>

int main() {
    int P, R;

    printf("Enter number of processes: ");
    scanf("%d", &P);

    printf("Enter number of resources: ");
    scanf("%d", &R);

    int allocation[P][R], max[P][R], need[P][R], available[R];
    int finished[P];
    int safeSequence[P];
    int count = 0;

    printf("Enter Allocation matrix (%d x %d):\n", P, R);
    for (int i = 0; i < P; i++)
        for (int j = 0; j < R; j++)
            scanf("%d", &allocation[i][j]);

    printf("Enter Max matrix (%d x %d):\n", P, R);
    for (int i = 0; i < P; i++)
        for (int j = 0; j < R; j++)
            scanf("%d", &max[i][j]);

    printf("Enter Available resources (%d):\n", R);
    for (int i = 0; i < R; i++)
        scanf("%d", &available[i]);

    printf("\nNeed matrix:\n");
    for (int i = 0; i < P; i++) {
        finished[i] = 0;
        for (int j = 0; j < R; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }

    while (count < P) {
        int found = 0;

        for (int p = 0; p < P; p++) {
            if (finished[p] == 0) {
                int canRun = 1;

                for (int r = 0; r < R; r++) {
                    if (need[p][r] > available[r]) {
                        canRun = 0;
                        break;
                    }
                }

                if (canRun == 1) {
                    for (int r = 0; r < R; r++)
                        available[r] += allocation[p][r];

                    safeSequence[count++] = p;
                    finished[p] = 1;
                    found = 1;
                }
            }
        }

        if (found == 0) {
            printf("\nSystem is not in a safe state.\n");
            return 1;
        }
    }

    printf("\nSystem is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < P; i++) {
        printf("P%d", safeSequence[i]);
        if (i != P - 1)
            printf(" -> ");
    }
    printf("\n");

    return 0;
}
